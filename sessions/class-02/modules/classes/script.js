/* eslint-disable strict */

'use strict';

// üéôÔ∏è Class is a syntactic sugar for the prototypal inheritance we have seen before
// üéôÔ∏è It eases up writing traditional OOP in JavaScript.
// üéôÔ∏è The following code will not run by default in browser or Quokka
// üéôÔ∏è Because we are using a bunch of experimental stuff
// üéôÔ∏è I have commented out the experimental stuff so that it runs.

class MyClass {
	// ! Experimental - Public Class Field
	// ! https://github.com/tc39/proposal-class-fields
	// üéôÔ∏è We have class/object properties
	// age = 28;

	// üéôÔ∏è We have a constructor
	constructor(name) {
		// üéôÔ∏è Constructor can assign object's own properties
		this.name = name;
		// üéôÔ∏è Since we want sayName to be always bound to the instance
		// üéôÔ∏è No matter how it is called
		// üéôÔ∏è We can create a bind function
		this.sayName = this.sayName.bind(this);
		// üéôÔ∏è Can you tell me how the above works?
		// üß∏ It has something to do with object own property and prototype
	}

	// üéôÔ∏è We have class methods
	// üéôÔ∏è When called through the instance of the class
	// üéôÔ∏è Class methods are bound the instance
	// üéôÔ∏è But it can be changed based on how it is called
	sayName() {
		console.log(this.name);
	}

	// ! Experimental - Public Class Field
	// üéôÔ∏è If we always want to have a method bound to the instance
	// üéôÔ∏è We can create class field and arrow functions
	// yellName = () => {
	// 	console.log(this.name);
	// };
	yellName() {
		console.log(this.name.toUpperCase());
	}

	// ! Experimental - Static Class Field
	// We have static properties
	// static objectifies = 'Person';

	// üéôÔ∏è We have static methods
	static yellObjectifies() {
		console.log(MyClass.objectifies);
	}
}

const swas = new MyClass('Swashata Ghosh');
console.log(swas, '');

// üéôÔ∏è Can you tell me how sayName is object's own property, but yellName is not?
console.log(Object.prototype.hasOwnProperty.call(swas, 'sayName'));
console.log(Object.prototype.hasOwnProperty.call(swas, 'yellName'));
